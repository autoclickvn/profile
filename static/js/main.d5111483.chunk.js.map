{"version":3,"sources":["layout/loadable-ui.tsx","language/i18n.ts","language/en.ts","language/vi.ts","util/useDimension.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["LoadableUI","resources","en","translation","STARFISH","LANGUAGE","vi","language","localStorage","getItem","i18n","use","initReactI18next","init","lng","interpolation","escapeValue","getWindowDimensions","window","width","height","innerWidth","innerHeight","RotateScreen","Loadable","loader","loading","DefaultLayout","Starfish","MainRouter","Music","TetHoliday","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useDimension","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kIAIeA,IAJc,WAC3B,OAAO,0B,0DCIHC,EAAY,CAChBC,GAAI,CACFC,YCPc,CAChBC,SAAU,CACRC,SAAU,cDOZC,GAAI,CACFH,YEVc,CAChBC,SAAU,CACRC,SAAU,uBFYRE,EAAWC,aAAaC,QAAQ,aAAe,KAErDC,IAAKC,IAAIC,KAAkBC,KAAK,CAC9BZ,YACAa,IAAKP,EACLQ,cAAe,CACbC,aAAa,KAIFN,EAAf,EAAeA,I,6EGtBf,SAASO,IACP,GAAsB,qBAAXC,OACT,MAAO,CACLC,MAAO,EACPC,OAAQ,GAIZ,MAAmDF,OACnD,MAAO,CACLC,MAFF,EAAQE,WAGND,OAHF,EAA2BE,aAOtB,I,OCbDC,EAAeC,IAAS,CAC5BC,OAAQ,kBAAM,+BACdC,QAAS1B,MAGL2B,EAAgBH,IAAS,CAC7BC,OAAQ,kBAAM,qDACdC,QAAS1B,MAGL4B,EAAWJ,IAAS,CACxBC,OAAQ,kBAAM,oDACdC,QAAS1B,MAGL6B,EAAaL,IAAS,CAC1BC,OAAQ,kBAAM,qDACdC,QAAS1B,MAGL8B,EAAQN,IAAS,CACrBC,OAAQ,kBAAM,qDACdC,QAAS1B,MAGL+B,EAAaP,IAAS,CAC1BC,OAAQ,kBAAM,qDACdC,QAAS1B,MAsBIgC,MAnBf,WACE,MDlB0B,WAC1B,MAAgDC,mBAAShB,KAAzD,mBAAOiB,EAAP,KAAyBC,EAAzB,KAWA,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoBlB,KAItB,OADAC,OAAOoB,iBAAiB,SAAUD,GAC3B,kBAAMnB,OAAOqB,oBAAoB,SAAUF,MACjD,IAEIH,ECMmBM,GAE1B,OAFA,EAAQrB,MAAR,EAAeC,OAGN,cAACG,EAAD,IAIP,8BACE,eAACI,EAAD,WACE,cAACE,EAAD,IACA,cAACD,EAAD,IACA,cAACE,EAAD,IACA,cAACC,EAAD,UCjCOU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MAAM,2DCRnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAACkB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YCzH5B1B,M","file":"static/js/main.d5111483.chunk.js","sourcesContent":["const LoadableUI: React.FC = () => {\n  return <div></div>;\n};\n\nexport default LoadableUI;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport { EN } from './en';\nimport { VI } from './vi';\n\nconst resources = {\n  en: {\n    translation: EN,\n  },\n  vi: {\n    translation: VI,\n  },\n};\n\nconst language = localStorage.getItem('language') || 'en';\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: language,\n  interpolation: {\n    escapeValue: false,\n  },\n});\n\nexport default i18n;\n","export const EN = {\n  STARFISH: {\n    LANGUAGE: 'Language',\n  },\n};\n","export const VI = {\n  STARFISH: {\n    LANGUAGE: 'Ngôn ngữ',\n  },\n};\n","import { useEffect, useState } from 'react';\n\nfunction getWindowDimensions() {\n  if (typeof window === 'undefined') {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport const useDimension = () => {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n","import LoadableUI from 'layout/loadable-ui';\nimport Loadable from 'react-loadable';\nimport { useDimension } from 'util/useDimension';\n\nconst RotateScreen = Loadable({\n  loader: () => import('page/rotate-screen'),\n  loading: LoadableUI,\n});\n\nconst DefaultLayout = Loadable({\n  loader: () => import('layout/default-layout'),\n  loading: LoadableUI,\n});\n\nconst Starfish = Loadable({\n  loader: () => import('component/starfish'),\n  loading: LoadableUI,\n});\n\nconst MainRouter = Loadable({\n  loader: () => import('route/router'),\n  loading: LoadableUI,\n});\n\nconst Music = Loadable({\n  loader: () => import('component/music'),\n  loading: LoadableUI,\n});\n\nconst TetHoliday = Loadable({\n  loader: () => import('component/tet-holiday'),\n  loading: LoadableUI,\n});\n\nfunction App() {\n  const { width, height } = useDimension();\n\n  if (width < height) {\n    return <RotateScreen />;\n  }\n\n  return (\n    <div>\n      <DefaultLayout>\n        <MainRouter />\n        <Starfish />\n        <Music />\n        <TetHoliday />\n      </DefaultLayout>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'language/i18n';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'style/index.css';\nimport 'tailwindcss/tailwind.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorkerRegistration.unregister();\nreportWebVitals();\n"],"sourceRoot":""}