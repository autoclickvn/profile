{"version":3,"sources":["util/useDimension.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx","layout/loadable-ui.tsx"],"names":["getWindowDimensions","window","width","height","innerWidth","innerHeight","RotateScreen","Loadable","loader","loading","LoadableUI","DefaultLayout","Starfish","Home","Music","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useDimension","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0516047a.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction getWindowDimensions() {\n  if (typeof window === 'undefined') {\n    return {\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nexport const useDimension = () => {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n","import LoadableUI from 'layout/loadable-ui';\nimport Loadable from 'react-loadable';\nimport { useDimension } from 'util/useDimension';\n\nconst RotateScreen = Loadable({\n  loader: () => import('page/rotate-screen'),\n  loading: LoadableUI,\n});\n\nconst DefaultLayout = Loadable({\n  loader: () => import('layout/default-layout'),\n  loading: LoadableUI,\n});\n\nconst Starfish = Loadable({\n  loader: () => import('component/starfish'),\n  loading: LoadableUI,\n});\n\nconst Home = Loadable({\n  loader: () => import('page/home'),\n  loading: LoadableUI,\n});\n\nconst Music = Loadable({\n  loader: () => import('component/music'),\n  loading: LoadableUI,\n});\n\nfunction App() {\n  const { width, height } = useDimension();\n\n  if (width < height && width < 576) {\n    return <RotateScreen />;\n  }\n\n  return (\n    <div>\n      <DefaultLayout>\n        <Home />\n        <Starfish />\n        <Music />\n      </DefaultLayout>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'style/index.css';\nimport 'tailwindcss/tailwind.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n","const LoadableUI: React.FC = () => {\n  return <div></div>;\n};\n\nexport default LoadableUI;\n"],"sourceRoot":""}